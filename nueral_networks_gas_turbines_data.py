# -*- coding: utf-8 -*-
"""nueral networks gas turbines data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11oTDxwr5TaVxPDgK1qq_VKFu9Txvs2-H
"""

from google.colab import files
uploaded = files.upload()



import pandas as pd
df = pd.read_csv("gas_turbines.csv")

df

df.shape
list(df)

df.dtypes

df.duplicated()

df.isnull()
df.isnull().sum()

df.columns.duplicated()

X = df.drop("TEY",axis = 1)

Y = df["TEY"]

import matplotlib.pyplot as plt
plt.scatter(x = X["AT"],y = X["AP"],color = "red")
plt.scatter(x = X["AT"],y = X["AH"],color = "red")
plt.scatter(x = X["AH"],y = X["AFDP"],color = "red")
plt.scatter(x = X["GTEP"],y = X["AP"],color = "red")
plt.scatter(x = X["AT"],y = X["TIT"],color = "red")
plt.scatter(x = X["TAT"],y = X["AP"],color = "red")
plt.scatter(x = X["CDP"],y = X["CO"],color = "red")
plt.scatter(x = X["NOX"],y = X["GTEP"],color = "red")

plt.scatter(x = X["NOX"],y = X["GTEP"],color = "red")

plt.scatter(x = X["AT"],y = X["AH"],color = "red")

plt.scatter(x = X["AH"],y = X["AFDP"],color = "red")

plt.scatter(x = X["GTEP"],y = X["AP"],color = "red")

plt.scatter(x = X["AT"],y = X["TIT"],color = "red")

plt.scatter(x = X["TAT"],y = X["AP"],color = "red")

plt.scatter(x = X["CDP"],y = X["CO"],color = "red")

plt.scatter(x = X["NOX"],y = X["GTEP"],color = "red")

plt.scatter(x = X["NOX"],y = X["GTEP"],color = "red")



plt.scatter(x = X["AT"],y = X["AP"],color = "red")

X["AT"].hist()
X["AP"].hist()
X["AH"].hist()
X["AFDP"].hist()
X["GTEP"].hist()
X["TIT"].hist()
X["TAT"].hist()
X["CDP"].hist()
X["CO"].hist()
X["NOX"].hist()

import seaborn as sns
sns.pairplot (X)

import matplotlib.pyplot as plt

def plot_boxplot(df,k):
    df.boxplot(column = [k])
    plt.grid(False)
    plt.show()

plot_boxplot(X,"AT")

plot_boxplot(X,"AP")

plot_boxplot(X,"AH")

plot_boxplot(X,"AFDP")

plot_boxplot(X,"GTEP")

plot_boxplot(X,"TIT")

plot_boxplot(X,"TAT")

plot_boxplot(X,"CDP")

plot_boxplot(X,"CO")

plot_boxplot(X,"CO")

plot_boxplot(X,"NOX")



def outliers(df,k):
    Q1 = df[k].quantile(0.25)
    Q3 = df[k].quantile(0.75)
    IQR = Q3-Q1
    
    lower_bound = Q1-2.5*IQR
    upper_bound = Q3 + 2.5*IQR
    ls = df.index[(df[k]<lower_bound) | (df[k] > upper_bound)]
    return ls



index_list = []
for feature in ["AT","AP","AH","AFDP","GTEP","TIT","TEY","TAT","CDP","CO","NOX"]:
    index_list.extend(outliers(df,feature))

index_list

def remove(df,ls):
    ls = sorted(set(ls))
    df = df.drop(ls)
    return df


df_new = remove(df,index_list)
df_new.shape

df_new.shape

X = df_new.drop("TEY",axis = 1)
Y = df_new["TEY"]



from sklearn.preprocessing import StandardScaler
SS = StandardScaler()
X = SS.fit_transform(X)
X



X = pd.DataFrame(X)
X

from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

model = Sequential()
model.add(Dense(15,input_dim = 10 , activation = "relu"))
model.add(Dense(1, activation  = "linear"))

model = Sequential()
model.add(Dense(15,input_dim = 10 , activation = "relu"))
model.add(Dense(15,activation = "relu"))
model.add(Dense(1, activation  = "linear"))

model.compile(loss = "mean_squared_error",optimizer = "adam",metrics = ["mae"])

history = model.fit(X,Y,validation_split = 0.33,epochs = 150,batch_size = 100 )

scores = model.evaluate(X,Y)
print("%s : %2f%%"%(model.metrics_names[1],scores[1]*100))

history.history.keys()

import matplotlib.pyplot as pairplot
plt.plot(history.history["mae"])
plt.plot(history.history["val_mae"])
plt.title("model mae")
plt.ylabel("mae")
plt.xlabel("epoch")
plt.legend(["train","test"],loc = "upper left")
plt.show()

