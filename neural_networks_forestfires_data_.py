# -*- coding: utf-8 -*-
"""neural networks forestfires.data .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ymzePwqFHFlxNlFt4XnQNtZyCmnfB_Y
"""

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

import pandas as pd
df_raw = pd.read_csv("forestfires.csv")
df_raw
df_raw.shape
df_raw.dtypes
df_raw.describe()


df_raw.duplicated()

df_raw.columns.duplicated()

df_raw.isna()
df_raw.isna().sum()





import matplotlib.pyplot as plt

def plot_boxplot(df,ft):
    df.boxplot(column=[ft])
    plt.grid(False)
    plt.show()
    
plot_boxplot(df_raw, "FFMC")

    
plot_boxplot(df_raw, "DMC")

    
plot_boxplot(df_raw, "DC")

     
plot_boxplot(df_raw, "ISI")
   
plot_boxplot(df_raw, "temp")
    
plot_boxplot(df_raw, "RH")

plot_boxplot(df_raw, "wind")
plot_boxplot(df_raw, "rain")
plot_boxplot(df_raw, "area")



def outliers(df,ft):
    Q1 = df[ft].quantile(0.25)
    Q3 = df[ft].quantile(0.75)
    IQR = Q3-Q1
    
    lower_bound = Q1-3.5* IQR
    upper_bound = Q3 + 3.5 * IQR
    ls = df.index[(df[ft] < lower_bound) | (df[ft] > upper_bound)]
    return ls




index_list = []
for feature in ["FFMC","DMC","DC","ISI","temp","RH","wind","rain","area"]:
    index_list.extend(outliers(df_raw,feature))


index_list

def remove(df,ls):
    ls = sorted(set(ls))
    df = df.drop(ls)
    return df

df_cleaned = remove(df_raw,index_list)
df_cleaned.shape


df_cleaned.shape

df_cleaned.dtypes

df_cleaned["FFMC"].hist()
df_cleaned["DMC"].hist()
df_cleaned["DC"].hist()
df_cleaned["ISI"].hist()
df_cleaned["temp"].hist()
df_cleaned["RH"].hist()
df_cleaned["wind"].hist()
df_cleaned["rain"].hist()
df_cleaned["area"].hist()

from sklearn.preprocessing import LabelEncoder
LE = LabelEncoder()
df_cleaned["month"] = LE.fit_transform(df_cleaned["month"])
df_cleaned["day"] = LE.fit_transform(df_cleaned["day"])
df_cleaned["size_category"] = LE.fit_transform(df_cleaned["size_category"])

X = df_cleaned.iloc[:,0:30]

Y = df_cleaned["size_category"]

import matplotlib.pyplot as plt

plt.scatter(x = X["FFMC"],y = X["temp"] ,color = "black")
plt.scatter(x = X["DMC"],y = X["RH"] ,color = "black")
plt.scatter(x = X["DC"],y = X["RH"] ,color = "black")
plt.scatter(x = X["ISI"],y = X["RH"] ,color = "black")
plt.scatter(x = X["temp"],y = X["ISI"] ,color = "black")
plt.scatter(x = X["RH"],y = X["temp"] ,color = "black")
plt.scatter(x = X["wind"],y = X["RH"] ,color = "black")
plt.scatter(x = X["rain"],y = X["ISI"] ,color = "black")
plt.scatter(x = X["DMC"],y = X["ISI"] ,color = "black")
plt.scatter(x = X["DMC"],y = X["DC"] ,color = "black")

df_cleaned.shape

from keras.models import Sequential
from keras.layers import Dense
model = Sequential()
model.add(Dense(45, input_dim=30, kernel_initializer='uniform', activation='relu'))
model.add(Dense(1, kernel_initializer='uniform', activation='sigmoid'))

model.compile(loss = "binary_crossentropy",optimizer = "adam",metrics = ["accuracy"])

history = model.fit(X,Y,validation_split = 0.33,epochs = 200,batch_size =3 )

scores = model.evaluate(X,Y)
print("%s:%2f%%"%(model.metrics_names[1],scores[1]*100))

history.history.keys()



import matplotlib.pyplot as plt
plt.plot(history.history["accuracy"])
plt.plot(history.history["val_accuracy"])
plt.title("model accuracy")
plt.ylabel("accuracy")
plt.xlabel("epoch")
plt.legend(["train","test"],loc = "upper left")
plt.show()